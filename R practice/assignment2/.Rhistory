install.packages('maptools')
install.packages('tmaptools')
install.packages('ggplot2')
install.packages('maptools')
install.packages('gpclib')
install.packages('Rtools')
install.packages('gpclib')
library('gpclib')
install.packages('ggmap')
install.packages('RColorBrewer')
install.packages('maps')
install.packages('mapproj')
install.packages('geosphere')
library('tmaptools')
library('tmaptools')
geocode_OSM("Melbourne")
?get_googlemap
help(get_stamenmap)
library('ggmap')
?get_googlemap
?get_cloudmademap
?get_openstreetmap
library('maps')
map('nz')
map('china')
map('cn')
map('usa')
map('au')
?map()
map('county', 'new jersey')
myLocation1 <- 'Melbourne'
myLocation2 <-c(lon=-95.3632715, lat=29.7632836)
myLocation2
myLocation3 <- c(-130,30,-105,50)
myLocation4 <- geocode_OSM('Melbourne')
bboxVector <- as.vetor(myLocation4$bbox)
bboxVector <- as.vector(myLocation4$bbox)
bbox1 <- c()
bbox1 <- c(left = bboxVector[1], bottom = bboxVector[2], right = bboxVector[3], top = bboxVector[4])
myMap <- get_stamenmap(bbox = bbox1, maptype = 'watercolor', zoom = 13)
ggmap(myMap)
install.packages(c('curl', 'yaml'))
install.packages(c("curl", "yaml"))
devtools::install_github('hadley/ggplot2@v2.2.0')
install.packages('devtools')
devtools::install_github('hadley/ggplot2@v2.2.0')
devtools::install_github('dkahle/ggmap')
require(mapproj)
m <- map('usa', plot = FALSE)
map(m, project = 'mercator')
map.grid(m)
map(m, project = 'albers', par=c(39,45))
map.grid(m)
m <- map('world', plot = FALSE)
map(m, proj = 'azequalarea', orient = c(41, -74, 0))
map(m, proj = 'azequalarea', orient = c(-41, -74, 0))
map(m, proj = 'azequalarea', orient = c(41, -74, 10))
map(m, proj = 'azequalarea', orient = c(41, -74, 100))
map(m, proj = 'azequalarea', orient = c(41, -74, 0))
map.grid(m, col = 2)
map(m, proj = 'azequalarea', orient = c(0, 0, 0))
map(m, proj = 'azequalarea', orient = c(0, 50, 0))
map(m, proj = 'azequalarea', orient = c(-50, 0, 0))
map(m, proj = 'azequalarea', orient = c(0, 0, 0))
map(m, proj = 'azequalarea', orient = c(0, 50, 0))
map(m, proj = 'azequalarea', orient = c(0, 150, 0))
map(m, proj = 'azequalarea', orient = c(0, 150, 50))
map(m, proj = 'azequalarea', orient = c(10, 150, 0))
map(m, proj = 'azequalarea', orient = c(50, 150, 0))
map(m, proj = 'azequalarea', orient = c(30, 150, 0))
map(m, proj = 'azequalarea', orient = c(0, 150, 0))
map(m, proj = 'azequalarea', orient = c(-20, 150, 0))
map(m, proj = 'orth', orient = c(41,-74,0))
map.grid(m, col = 2, nx= 5, label =FALSE, lty = 2)
points(mapproject(list(y = 41, x = -74)), col = 3, pch = 'x', cex = 2)
points(mapproject(list(y = 144.96316, x = -37.81422)), col = 3, pch = 'x', cex = 2)
map(m, proj = 'orth', orient = c(144,96316,-37.81422,0))
map(m, proj = 'orth', orient = c(144.96316,-37.81422,0))
map('state', proj='bonne', param=45)
map('state', proj='bonne', param=10)
map('state', proj='bonne', param=45)
map('state', proj='bonne', param=90)
?map()
?map
data(state)
text(mapproject(state.center), state.abb)
text(mapproject(state.center, param=90), state.abb)
help(crime)
airports <- read.csv("http://datasets.flowingdata.com/tuts/maparcs/airports.csv", header = TRUE)
flights <- read.csv("http://datasets.flowingdata.com/tuts/maparcs/flights.csv", header = TRUE, as.is = TRUE)
head(airports)
head(flights)
xlim <- c(-171.738281, -56.601563)
ylim <- c(12.039321, 71.856229)
map('world', col="#f2f2f2", fill=TRUE, bg='white',lwd=0.05, xlim=xlim,ylim=ylim)
fsub <- flights[flights$airline == "AA",]
for(j in 1:length(fsub$airline))
{
air1 <- airports[
airports$iata == fsub[
j,]$airport1,]
air2 <- airports[
airports$iata == fsub[
j,]$airport2,]
inter <- gcIntermediate(
c(
air1[1,]$long,
air1[1,]$lat
),
c(
air2[1,]$long,
air2[1,]$lat
),
n = 100,
addStartEnd = TRUE
)
lines(inter)
library(geosphere)
map("state")
library(maps)
map("state")
lat_ca <- 39.164141
lon_ca <- -121.640625
lat_me <- 45.213004
lon_me <- -68.906250
inter <- gcIntermediate(
c(lon_ca,lat_ca),
c(lon_me,lat_me),
n = 50,
addStartEnd=TRUE
)
lines(inter)
airports <- read.csv("http://datasets.flowingdata.com/tuts/maparcs/airports.csv", header = TRUE)
flights <- read.csv("http://datasets.flowingdata.com/tuts/maparcs/flights.csv", header = TRUE, as.is = TRUE)
head(airports)
head(flights)
xlim <- c(-171.738281, -56.601563)
ylim <- c(12.039321, 71.856229)
map(
"world",
col="#f2f2f2",
fill=TRUE,
bg="white",
lwd=0.05,
xlim=xlim,
ylim=ylim
)
fsub <- flights[flights$airline == "AA",]
for(j in 1:length(fsub$airline))
{
air1 <- airports[
airports$iata == fsub[
j,]$airport1,]
air2 <- airports[
airports$iata == fsub[
j,]$airport2,]
inter <- gcIntermediate(
c(
air1[1,]$long,
air1[1,]$lat
),
c(
air2[1,]$long,
air2[1,]$lat
),
n = 100,
addStartEnd = TRUE
)
lines(inter, col="black", lwd=0.8)
}
setwd("C:/Users/zhuha/OneDrive/Desktop/2020 S1/FIT5147/Assignment 2")
# Programming Exercise 2
# Haoheng Zhu(30376467)
require(ggplot2)
require(dplyr)
require(shiny)
require(leaflet)
# Question 1 ---- read dataset
# read data
rawData <- read.csv('assignment-02-data-formated.csv')
# explore data
head(rawData)
# check data structure
str(rawData)
# Question 2 ---- Plot data
# value column is factor datatype, needs to change to numeric type
rawData$value <- as.numeric(as.character(sub('%', '', rawData$value)))
# in order to sort by latitude, need to change location to factor type
# inspired by https://stackoverflow.com/questions/14262497/fixing-the-order-of-facets-in-ggplot
# arrange dataframe before changing factor type
rawData <- arrange(rawData, desc(rawData$latitude))
rawData$location <- factor(rawData$location, levels = unique(rawData$location), ordered = T)
# check structure after datatype changes
str(rawData)
# make and save first plot
plot1 <- ggplot(rawData, aes(year, value)) %>%
+ geom_point() %>%
+ facet_grid(location~coralType)
# check first plot
plot1
# smoothing data
plot2 <- plot1 + geom_smooth(
aes(group = 1),
method = 'lm',
color = 'blue',
formula = y~poly(x,2),
se = TRUE
)
# plot second graph
plot2
